---
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: opencti-vpc
        region: "{{ region }}"
        cidr_block: "{{ vpc_cidr }}"
      tags: dns
      register: vpc

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: opencti-sg
        description: Security group for OpenCTI
        vpc_id: "{{ vpc.vpc.id }}"
        rules: 
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 25
            to_port: 25
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 6379
            to_port: 6379
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 5672
            to_port: 5672
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 9000
            to_port: 9000
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 15672
            to_port: 15672
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: -1
            from_port: 0
            to_port: 0
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Create Subnets
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ item.cidr }}"
        region: "{{ region }}"
        az: "{{ item.az }}"
        map_public: true
      loop: "{{ subnets }}"
      register: subnet_results
      tags: cluster

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
      register: igw

    - name: Attach Internet Gateway to VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        internet_gateway_id: "{{ igw.gateway_id }}"
        region: "{{ region }}"
        state: present

    - name: Create Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
      register: route_table

    - name: Create Route to IGW
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        route_table_id: "{{ route_table.route_table.id }}"
        gateway_id: "{{ igw.gateway_id }}"
        region: "{{ region }}"

    - name: Associate Route Table with Subnets
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        route_table_id: "{{ route_table.route_table.id }}"
        subnets: "{{ item.subnet.id }}"
        region: "{{ region }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      loop: "{{ subnet_results.results }}"
      loop_control:
        loop_var: item
      tags: cluster

    - name: Create EKS Cluster
      community.aws.eks_cluster:
        name: "{{ cluster_name }}"
        region: "{{ region }}"
        role_arn: "{{ role_arn }}"
        subnets: "{{ subnet_results.results | map(attribute='subnet.id') | list }}"
        security_groups:
          - "{{ sg.group_id }}"
      register: eks_cluster
      tags: cluster

    - name: Pause for 8 minutes before creating Nodegroup
      pause:
        minutes: 8
      tags: pause

    - name: Create Nodegroup
      community.aws.eks_nodegroup:
        name: ng-opencti
        state: present
        cluster_name: "{{ cluster_name }}"
        node_role: "{{ node_role }}"
        subnets: "{{ subnet_results.results | map(attribute='subnet.id') | list }}"
        scaling_config:
          min_size: 1
          max_size: 4
          desired_size: 3
        disk_size: 20
        instance_types: ['t3.medium']
      register: nodegroup

    - name: Pause for 3 minutes before configuring kubectl
      pause:
        minutes: 3
      tags: pause

    - name: Configure kubectl
      shell: aws eks --region {{ region }} update-kubeconfig --name {{ cluster_name }}
      args:
        chdir: /usr/local/bin

    - name: Create a Route 53 hosted zone
      amazon.aws.route53_zone:
        state: present
        comment: "Hosted zone for OpenCTI"
        vpc_region: "{{ region }}"
        zone: "{{ zone_name }}"
      register: route53_zone
      tags: dns
    
    - name: Add Opencti chart repository
      kubernetes.core.helm_repository:
        name: devops-ia
        repo_url: "https://devops-ia.github.io/helm-charts"
      tags: helm


    - name: Copy values.yaml to target host if not present
      copy:
        src: /Users/macbookpro/Desktop/projet/ansible/playbooks/roles/eks/files/values.yaml
        dest: /tmp/values.yaml
      tags: helm

    - name: Create namespace and a helm chart release
      tags: helm
      kubernetes.core.helm:
        name: opencti
        chart_ref: devops-ia/opencti
        update_repo_cache: true
        release_namespace: opencti
        create_namespace: true
        values_files: 
          -  /tmp/values.yaml

    - name: Add ingress controller
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: "https://kubernetes.github.io/ingress-nginx/"
      tags: ingress

    - name: Create namespace and install ingress controller
      tags: ingress
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        update_repo_cache: true
        release_namespace: ingress-nginx
        create_namespace: true

    - name: Pause for 2 minutes before configuring ingress
      pause:
        minutes: 2
      tags: ingress

    - name: Create an ingress
      tags: ingress
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: opencti-ingress
            namespace: opencti
            className: "nginx"
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
              kubernetes.io/ingress.class: nginx
              nginx.ingress.kubernetes.io/rewrite-target: /
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
          spec:
            rules:
            - host: opencti-oclock.com
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: opencti-server
                      port:
                        number: 80
            tls:
            - hosts:
              - opencti-oclock.com
              secretName: opencti-tls

    - name: Add cert-manager repository
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: "https://charts.jetstack.io"
      tags: cert

    - name: Create namespace and cert-manager
      tags: cert
      shell: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.5/cert-manager.yaml

    - name: Pause for 2 minutes before configuring cert issuer
      pause:
        minutes: 2
      tags: cert

    - name: Create a cert-manager issuer
      tags: cert
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              email: jenne0985@gmail.com
              server: https://acme-v02.api.letsencrypt.org/directory
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
              - http01:
                  ingress:
                    class: nginx
              - dns01:
                  route53:
                    region: eu-west-3
                    hostedZoneID: Z09532671N40UNRYKTHLF
